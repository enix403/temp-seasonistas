type Experience = {
  title: string;
  company: string;
  description: string;
  startDate: Date;
  endDate: Date;
  currentlyActive: boolean;
}

type User = {
  email: string;
  passwordHash: string;
  role: 'admin' | 'employer' | 'employee';

  fullName: string;
  gender: 'male' | 'female' | 'notSpecified';
  profilePictureUrl: string;
  bio: string;
  addressCountry: string;
  addressCity: string;
  addressArea: string;
  addressZip: string;
  phone: string;
  experiences: Experience[];
  skills: string[]

  companyName: string;
  companyPhone: string;
  companyCountry: string;
  companyCity: string;
  companyArea: string;
  companyZip: string;
  companyIndustry: string;

  isBanned: boolean;
}

type JobPosting = {
  // Job Info
  title: string;
  description: string;
  category: string;
  specialism: string;
  jobType: 'fullTime' | 'partTime' | 'internship' | 'specificDates';

  // Experience
  expLevelRequired: 'entry' | 'mid' | 'senior';

  // Qualification
  qualificationsRequired: string[];
  qualificationsDesired: string[];

  // Salary
  salaryMode: 'monthly' | 'hourly';
  salary: number;

  // Schedule/Periods of work
  startDate: Date; // Only date
  endDate: Date; // Only date
  startTime: Date; // Only time
  endTime: Date; // Only time

  // Other
  benefits: string[];
  workingLanguage: string;
  residence: 'yes' | 'no' | 'allowance';
  food: 'yes' | 'no' | 'oneMeal' | 'twoMeal' | 'allowance';
  transport: 'required' | 'notRequired' | 'mopedProvided' | 'carProvided';

  // Company Info
  companyName: string;
  companyUsername: string;
  companyDescription: string;
  companyWebsite: string;
  companyLogoUrl: string;
  companyCountry: string;
  companyCity: string;
  companyArea: string;
  companyZip: string;
  companyMapAddress: string;

  // Questions to ask applicants
  questions: string[];

  // Misc JobPosting info
  postedAt: Date;
  expireAt: Date;
  isActive: boolean;
}

type JobApplication = {
  jobId: string;
  employeeId: string;
  appliedAt: Date;

  // Answers to questions specified in `questions` field of JobPosting
  answers: { question: string, answer: string }[];
  isEmployerInterested: boolean;
  decision: 'accepted' | 'rejected' | 'waiting';
}

type JobInvitation = {
  jobId: string;
  employeeId: string;
  invitedByUserId: string; // could be admin or employer
  invitedAt: Date;
  status: 'accepted' | 'rejected' | 'waiting';
}

// ----------------------

Convert this into a typescript mongoose model (Typescript interface + mongoose schema + mongoose model)

QueryMessage:
  name: string (required)
  email: string (required)
  body: string (required)
